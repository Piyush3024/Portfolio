generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            Int       @id @default(autoincrement())
  username           String    @unique @db.VarChar(50)
  email              String    @unique @db.VarChar(100)
  password           String?   @db.VarChar(255)
  role_id            Int       @default(2)
  full_name          String    @db.VarChar(50)
  phone              String?   @db.VarChar(20)
  failed_attempts    Int       @default(0)
  is_blocked         Boolean   @default(false)
  blocked_until      DateTime?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  oauth_id           String?   @unique @db.VarChar(100)
  oauth_provider     String?   @db.VarChar(20)
  reset_token        String?   @db.VarChar(255)
  reset_token_expiry DateTime?
  comments           Comment[]
  posts              Post[]
  projects           Project[]
  role               Role      @relation(fields: [role_id], references: [role_id])
}

model Role {
  role_id Int      @id
  name    RoleType
  users   User[]
}

model Contact {
  contact_id Int      @id @default(autoincrement())
  full_name  String   @db.VarChar(100)
  email      String   @db.VarChar(100)
  phone      String?  @db.VarChar(20)
  title      String?  @db.VarChar(100)
  message    String
  created_at DateTime @default(now())
}

model Project {
  id           Int      @id @default(autoincrement())
  name         String
  description  String
  githubUrl    String
  liveUrl      String?
  imageUrl     String?
  technologies String?
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  slug      String    @unique @db.VarChar(255)
  content   String
  published Boolean   @default(false)
  authorId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [user_id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  postId    Int
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [user_id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id])
}

enum RoleType {
  ADMIN
  USER
}
