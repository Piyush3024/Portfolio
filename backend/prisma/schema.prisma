// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  USER
}

model User {
  user_id       Int       @id @default(autoincrement())
  username      String    @unique @db.VarChar(50)
  email         String    @unique @db.VarChar(100)
  password      String    @db.VarChar(255)
  role_id       Int       @default(2)
  full_name    String    @db.VarChar(50)

  phone         String?   @db.VarChar(20)


  failed_attempts Int     @default(0)
  is_blocked    Boolean  @default(false)
  blocked_until DateTime?
 
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  role          Role      @relation(fields: [role_id], references: [role_id])
  projects      Project[]
  posts         Post[]     
  comments      Comment[]
}

model Role {
  role_id       Int      @id
  name          RoleType
  users         User[]
}


model Contact {
  contact_id      Int        @id @default(autoincrement())
  full_name       String     @db.VarChar(100) 
  email           String     @unique @db.VarChar(100)
  phone         String?   @db.VarChar(20)
  title           String?    @db.VarChar(100)
  message         String     @db.Text
  created_at      DateTime   @default(now())
}



// Project model for showcasing admin's projects
model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  
  // Project links and details
  githubUrl   String
  liveUrl     String?
  imageUrl    String?    @db.Text
  
  // Technologies used (optional)
  technologies String? @db.Text
  
  // Relation to user (admin)
  user        User     @relation(fields: [userId], references: [user_id],  onDelete: Cascade)
  userId      Int
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Post {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  slug        String   @unique @db.VarChar(255) // URL-friendly title
  content     String   @db.Text
  published   Boolean  @default(false) // Control visibility
  authorId    Int
  author      User     @relation(fields: [authorId], references: [user_id],  onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  authorId  Int
  postId    Int      // No @relation needed here
  author    User     @relation(fields: [authorId], references: [user_id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}